import tkinter as tk
from tkinter import ttk
from tkinter import scrolledtext
import tkinter.font as font  
import subprocess
import os
import re
import threading
import time
import json
import tkinter.messagebox
import sys

def add_new_ip_set():
   
    new_window = tk.Toplevel(root)
    new_window.title("Agregar nuevo conjunto de IPs")
    new_window.geometry("400x200")  # Ajusta el tamaño de la ventana
    
    frame = ttk.Frame(new_window, padding="10")
    frame.pack(fill=tk.BOTH, expand=True)
    
    ttk.Label(frame, text="Nombre del conjunto:", font=("Arial", 12)).grid(row=0, column=0, sticky=tk.W, pady=10)
    set_name_entry = ttk.Entry(frame, font=("Arial", 12))
    set_name_entry.grid(row=0, column=1, sticky=tk.EW, pady=10)
    
    ttk.Label(frame, text="IPs (separadas por comas):", font=("Arial", 12)).grid(row=1, column=0, sticky=tk.W, pady=10)
    ip_entry = ttk.Entry(frame, font=("Arial", 12))
    ip_entry.grid(row=1, column=1, sticky=tk.EW, pady=10)
    
    
    def save_new_set():
        new_set_name = set_name_entry.get()
        new_ips = ip_entry.get().split(',')
        
        # Cargar el archivo JSON existente
        existing_ip_sets = load_ip_list_from_file()

        if new_set_name and new_ips:
            new_ips = [{'host': ip.strip(), 'description': ''} for ip in new_ips if ip.strip()]

            # Añadir el nuevo conjunto al diccionario existente
            existing_ip_sets[new_set_name] = new_ips

            # Guardar el diccionario actualizado en el archivo JSON
            save_ip_list_to_file(existing_ip_sets)
            
            # Actualizar el Combobox
            ip_set_combo['values'] = list(existing_ip_sets.keys())
            ip_set_combo.current(len(existing_ip_sets.keys()) - 1)  # Establecer el último elemento como el actual

            tk.messagebox.showinfo("Éxito", "Lista de IPs guardada exitosamente")
            new_window.destroy()
        else:
            tk.messagebox.showwarning("Advertencia", "Por favor, rellene todos los campos")


    
    ttk.Button(new_window, text="Guardar", command=save_new_set).pack(pady=5)

def load_ip_list_from_file(filename="ip_list.json"):
    dir_path = os.getcwd()
    full_path = os.path.join(dir_path, filename)
    print(f"Intentando cargar desde: {full_path}")
    try:
        with open(full_path, 'r') as f:
            return json.load(f)
    except FileNotFoundError:
        default_ip_sets = {
            "Internet": [
                {"host": "8.8.8.8", "description": "DNS Google internet"},
                {"host": "login.microsoftonline.com", "description": "login.microsoftonline.com"}
            ],
            "Salvatierra 5 all": [
                {"host": "10.5.176.11", "description": "Puerta de enlace local vlan 176 Fortigate"},
                {"host": "192.168.129.11", "description": "Wan Mutua vlan 10 Fortigate"}
            ],
            "MKT": [
                {"host": "172.5.0.50", "description": "Servidor DC Red MKT"}
            ],
            "MUTUA": [
                {"host": "srbig.mutua.es", "description": "srbig.mutua.es"}
            ],
            "Basica": [
                {"host": "10.5.176.11", "description": "Puerta de enlace local vlan 176 Fortigate"}
            ]
        }

        with open(full_path, 'w') as f:
            json.dump(default_ip_sets, f)
        return default_ip_sets
    except Exception as e:
        print(f"Error al cargar la lista de IP: {e}")
        return {}

def save_ip_list_to_file(ip_sets, filename="ip_list.json"):
    dir_path = os.getcwd()
    full_path = os.path.join(dir_path, filename)
    print(f"Guardando lista de IPs en: {full_path}")  # Añadido para debugging
    try:
        with open(full_path, 'w') as f:
            json.dump(ip_sets, f)
            print("Guardado exitosamente.")
        tkinter.messagebox.showinfo("Éxito", f"Lista de IPs guardada exitosamente en {full_path}.")
    except Exception as e:
        print(f"Error al guardar la lista de IPs: {e}")
        tkinter.messagebox.showerror("Error", f"Error al guardar la lista de IPs: {e}")

        

 # Inicializa el hilo como None
ping_thread = None
process = None
# Función para limpiar las áreas de texto
def clear_text_areas():
    failed_ip_text.config(state=tk.NORMAL)  # Asegura que el widget esté habilitado
    text_area.delete(1.0, tk.END)
    failed_ip_text.delete(1.0, tk.END)
    failed_ip_text.config(state=tk.DISABLED)  # Vuelve a deshabilitar el widget
cancel_event = threading.Event()
# Reemplazo para la función cancel_ping
def cancel_ping():
    global cancel_event
    cancel_event.set()

# Función para ejecutar el comando ping y actualizar la interfaz de texto

def run_ping(host, text_widget, comment=""):
    
    global cancel_event  # Accede a la variable global cancel_event
    global process  # Accede a la variable global process

    if cancel_event.is_set():
        return
    
    text_widget.insert(tk.END, f"---- {comment} ----\n")
    
    try:
        if os.name == 'posix':  # Linux/Unix/MacOS
            process = subprocess.Popen(["ping", "-c", "2", host], stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
        else:  # Windows
            process = subprocess.Popen(["ping", "-n", "2", host], stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
        
        while True:
            output = process.stdout.readline()
            if output == '' and process.poll() is not None:
                break
            if output:
                text_widget.insert(tk.END, output)
                text_widget.see(tk.END)
            
            if cancel_event.is_set():
                process.terminate()
                return
        
        rc = process.poll()
        
        failed_ip_text.config(state=tk.NORMAL)

        if rc == 0:
            failed_ip_text.insert(tk.END, f"{host} - {comment} - Exitoso\n", "green")
        else:
            failed_ip_text.insert(tk.END, f"{host} - {comment} - Fallido\n", "red")
        
    except Exception as e:
        text_widget.insert(tk.END, str(e) + "\n")
        failed_ip_text.insert(tk.END, f"{host} - {comment} - Error\n", "red")

    failed_ip_text.config(state=tk.DISABLED)
    text_widget.see(tk.END)
    failed_ip_text.focus_set()

def validate_network():
    try:
        response = subprocess.run(["ipconfig", "/all"], capture_output=True, text=True, timeout=10)
        ipconfig_output = response.stdout
        ip_addresses = re.findall(r'\b\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\b', ipconfig_output)
        for ip in ip_addresses:
            if ip.startswith("10.5.176."):
                return True
        tkinter.messagebox.showwarning("Advertencia", "No estás en la red correcta. Los resultados pueden ser incorrectos. Deberías estar en la red con dirección IP que comienza con 10.5.176.x")
        return False
    except subprocess.TimeoutExpired:
        tkinter.messagebox.showerror("Error", "Error al validar la red. Tiempo de espera agotado.")
        return False
# Función de envoltura para basic_checks con barra de progreso
def basic_checks_thread():
    clear_text_areas()
    global cancel_event  # Accede a la variable global
    cancel_event.clear()  # Reinicia el evento de cancelación
    progress.start(10)
    basic_checks()
    progress.stop()

def mkt_checks_thread():
    clear_text_areas()
    global cancel_event  # Accede a la variable global
    cancel_event.clear()  # Reinicia el evento de cancelación
    progress.start(10)
    mkt_checks()
    progress.stop()

def internet_checks_thread():
    clear_text_areas()
    global cancel_event  # Accede a la variable global
    cancel_event.clear()  # Reinicia el evento de cancelación
    progress.start(10)
    internet_checks()
    progress.stop()

def mutua_checks_thread():
    clear_text_areas()
    global cancel_event  # Accede a la variable global
    cancel_event.clear()  # Reinicia el evento de cancelación
    progress.start(10)
    mutua_checks()
    progress.stop()
# Funciones para diferentes tipos de comprobaciones
def basic_checks():
    
    clear_text_areas()
    
    run_ping("10.5.176.11", text_area, "Puerta de enlace local vlan 176 Fortigate")
    run_ping("192.168.129.11", text_area, "Wan Mutua vlan 10 Fortigate")
    run_ping("192.168.129.5", text_area, "Switch distribución Mutua vlan 10 Cisco")
    run_ping("192.168.129.252", text_area, "Router PPAL Mutua vlan 10")
    run_ping("192.168.129.253", text_area, "Router BKP Mutua vlan 10")
    run_ping("192.168.129.254", text_area, "Router VRRP Mutua vlan 10")

def internet_checks():
    
    clear_text_areas()
    run_ping("8.8.8.8", text_area, "DNS Google internet")
    run_ping("login.microsoftonline.com", text_area, "login.microsoftonline.com")

def mkt_checks():
  
    clear_text_areas()
    
    run_ping("172.5.0.50", text_area, "Servidor DC Red MKT")
    run_ping("172.5.0.20", text_area, "Servidor DATA-ST")
    run_ping("172.5.0.73", text_area, "Servidor DEMETER")
    run_ping("172.5.0.70", text_area, "Servidor MOODLE")
    run_ping("172.5.0.35", text_area, "Servidor NewRocketChat")
    run_ping("172.5.0.69", text_area, "Servidor NewRocketChat")
    run_ping("172.5.0.100", text_area, "Servidor ST5-Squid")
    run_ping("172.5.0.101", text_area, "Servidor ST5-Squid1")
    run_ping("172.5.0.102", text_area, "Servidor ST5-Squid2")
    run_ping("172.22.14.9", text_area, "Servidor Tilena")
    run_ping("172.5.0.202", text_area, "Servidor ZIMBRA")
    run_ping("172.5.0.51", text_area, "Servidor DHCP ST5")
    run_ping("172.21.0.60", text_area, "Servidor RT10701 - DNS")
    run_ping("172.18.1.200", text_area, "Servidor RT10701 - DNS")
    run_ping("172.22.6.200", text_area, "Servidor RT10701 - DNS")
    run_ping("10.0.50.100", text_area, "Servidor Central Avaya")

def mutua_checks():
    
    clear_text_areas()
    run_ping("srbig.mutua.es", text_area, "srbig.mutua.es")
    run_ping("mutua.inteliens.com", text_area, "mutua.inteliens.com")
    run_ping("172.22.10.33", text_area, "Servidor Altitud 8")
    run_ping("172.22.1.168", text_area, "Grabadora srvmw2avyappe01.mutua.es")
    run_ping("172.22.1.166", text_area, "Grabadora SRVMW2AVYGRBE01.mutua.es")
    run_ping("172.19.3.172", text_area, "Grabadora SRVMW1AVYGRBE02.mutua.es")
    run_ping("172.19.3.173", text_area, "Grabadora SRVMW1AVYGRBE01.mutua.es")
    run_ping("172.19.3.115", text_area, "CMS Supervidor")
    run_ping("172.23.0.113", text_area, "Primer sso.mutua.es")
    run_ping("172.23.0.114", text_area, "Segundo sso.mutua.es")
    run_ping("172.23.0.109", text_area, "Tercer sso.mutua.es")
    run_ping("172.18.0.1", text_area, "CICS Mutua")
    run_ping("172.19.10.153", text_area, "srbigpre11.mutua.es")
    run_ping("172.19.10.8", text_area, "srbigpre12.mutua.es")
    run_ping("172.23.100.5", text_area, "srbigpro11.mutua.es")
    run_ping("172.24.100.3", text_area, "srbigpro12.mutua.es")
    run_ping("172.23.100.6", text_area, "srbigpro13.mutua.es")
    run_ping("172.24.100.5", text_area, "srbigpro14.mutua.es")
    run_ping("172.19.11.41", text_area, "srbig.mutua.es")
    run_ping("172.23.0.83", text_area, "srbig.mutua.es")
    run_ping("160.8.255.40", text_area, "Salesforce Mutua")

def copy_to_clipboard(event):
    widget = event.widget
    try:
        selected_text = widget.get("sel.first", "sel.last")  # obtiene el texto seleccionado
        widget.clipboard_clear()
        widget.clipboard_append(selected_text)
    except tk.TclError:
        pass

# Función para exportar los resultados
def export_results():
    dir_path = os.getcwd()
    file_name = "resultados_ping.txt"
    file_path = os.path.join(dir_path, file_name)
    print(f"Exportando resultados a: {file_path}")  # Añadido para debugging
    try:
        with open(file_path, 'w') as f:
            f.write(text_area.get(1.0, tk.END))
            f.write("\n")
            f.write("---- Resultados Fallidos y Exitosos ----\n")
            f.write(failed_ip_text.get(1.0, tk.END))
        tkinter.messagebox.showinfo("Éxito", f"Resultados exportados con éxito en {file_path}")
    except Exception as e:
        tkinter.messagebox.showerror("Error", f"Ocurrió un error al exportar los resultados: {str(e)}")


def basic_checks():
    selected = selected_set.get()  # Obtén el valor seleccionado del Combobox
   
    if selected == 'Internet': 
        run_ping("8.8.8.8", text_area, "DNS Google internet")
        run_ping("login.microsoftonline.com", text_area, "login.microsoftonline.com")    
    elif selected == 'Salvatierra 5 all':
        run_ping("10.5.176.11", text_area, "Puerta de enlace local vlan 176 Fortigate")
        run_ping("192.168.129.11", text_area, "Wan Mutua vlan 10 Fortigate")
        run_ping("192.168.129.5", text_area, "Switch distribución Mutua vlan 10 Cisco")
        run_ping("192.168.129.252", text_area, "Router PPAL Mutua vlan 10")
        run_ping("192.168.129.253", text_area, "Router BKP Mutua vlan 10")
        run_ping("192.168.129.254", text_area, "Router VRRP Mutua vlan 10")
        run_ping("172.5.0.50", text_area, "Servidor DC Red MKT")
        run_ping("172.5.0.20", text_area, "Servidor DATA-ST")
        run_ping("172.5.0.73", text_area, "Servidor DEMETER")
        run_ping("172.5.0.70", text_area, "Servidor MOODLE")
        run_ping("172.5.0.35", text_area, "Servidor NewRocketChat")
        run_ping("172.5.0.69", text_area, "Servidor NewRocketChat")
        run_ping("172.5.0.100", text_area, "Servidor ST5-Squid")
        run_ping("172.5.0.101", text_area, "Servidor ST5-Squid1")
        run_ping("172.5.0.102", text_area, "Servidor ST5-Squid2")
        run_ping("172.22.14.9", text_area, "Servidor Tilena")
        run_ping("172.5.0.202", text_area, "Servidor ZIMBRA")
        run_ping("172.5.0.51", text_area, "Servidor DHCP ST5")
        run_ping("172.21.0.60", text_area, "Servidor RT10701 - DNS")
        run_ping("172.18.1.200", text_area, "Servidor RT10701 - DNS")
        run_ping("172.22.6.200", text_area, "Servidor RT10701 - DNS")
        run_ping("10.0.50.100", text_area, "Servidor Central Avaya")
        run_ping("srbig.mutua.es", text_area, "srbig.mutua.es")
        run_ping("mutua.inteliens.com", text_area, "mutua.inteliens.com")
        run_ping("172.22.10.33", text_area, "Servidor Altitud 8")
        run_ping("172.22.1.168", text_area, "Grabadora srvmw2avyappe01.mutua.es")
        run_ping("172.22.1.166", text_area, "Grabadora SRVMW2AVYGRBE01.mutua.es")
        run_ping("172.19.3.172", text_area, "Grabadora SRVMW1AVYGRBE02.mutua.es")
        run_ping("172.19.3.173", text_area, "Grabadora SRVMW1AVYGRBE01.mutua.es")
        run_ping("172.19.3.115", text_area, "CMS Supervidor")
        run_ping("172.23.0.113", text_area, "Primer sso.mutua.es")
        run_ping("172.23.0.114", text_area, "Segundo sso.mutua.es")
        run_ping("172.23.0.109", text_area, "Tercer sso.mutua.es")
        run_ping("172.18.0.1", text_area, "CICS Mutua")
        run_ping("172.19.10.153", text_area, "srbigpre11.mutua.es")
        run_ping("172.19.10.8", text_area, "srbigpre12.mutua.es")
        run_ping("172.23.100.5", text_area, "srbigpro11.mutua.es")
        run_ping("172.24.100.3", text_area, "srbigpro12.mutua.es")
        run_ping("172.23.100.6", text_area, "srbigpro13.mutua.es")
        run_ping("172.24.100.5", text_area, "srbigpro14.mutua.es")
        run_ping("172.19.11.41", text_area, "srbig.mutua.es")
        run_ping("172.23.0.83", text_area, "srbig.mutua.es")
        run_ping("160.8.255.40", text_area, "Salesforce Mutua")
    elif selected == 'MKT': 
        run_ping("172.5.0.50", text_area, "Servidor DC Red MKT")
        run_ping("172.5.0.20", text_area, "Servidor DATA-ST")
        run_ping("172.5.0.73", text_area, "Servidor DEMETER")
        run_ping("172.5.0.70", text_area, "Servidor MOODLE")
        run_ping("172.5.0.35", text_area, "Servidor NewRocketChat")
        run_ping("172.5.0.69", text_area, "Servidor NewRocketChat")
        run_ping("172.5.0.100", text_area, "Servidor ST5-Squid")
        run_ping("172.5.0.101", text_area, "Servidor ST5-Squid1")
        run_ping("172.5.0.102", text_area, "Servidor ST5-Squid2")
        run_ping("172.22.14.9", text_area, "Servidor Tilena")
        run_ping("172.5.0.202", text_area, "Servidor ZIMBRA")
        run_ping("172.5.0.51", text_area, "Servidor DHCP ST5")
        run_ping("172.21.0.60", text_area, "Servidor RT10701 - DNS")
        run_ping("172.18.1.200", text_area, "Servidor RT10701 - DNS")
        run_ping("172.22.6.200", text_area, "Servidor RT10701 - DNS")
        run_ping("10.0.50.100", text_area, "Servidor Central Avaya")
    elif selected == 'MUTUA': 
        clear_text_areas()
        run_ping("srbig.mutua.es", text_area, "srbig.mutua.es")
        run_ping("mutua.inteliens.com", text_area, "mutua.inteliens.com")
        run_ping("172.22.10.33", text_area, "Servidor Altitud 8")
        run_ping("172.22.1.168", text_area, "Grabadora srvmw2avyappe01.mutua.es")
        run_ping("172.22.1.166", text_area, "Grabadora SRVMW2AVYGRBE01.mutua.es")
        run_ping("172.19.3.172", text_area, "Grabadora SRVMW1AVYGRBE02.mutua.es")
        run_ping("172.19.3.173", text_area, "Grabadora SRVMW1AVYGRBE01.mutua.es")
        run_ping("172.19.3.115", text_area, "CMS Supervidor")
        run_ping("172.23.0.113", text_area, "Primer sso.mutua.es")
        run_ping("172.23.0.114", text_area, "Segundo sso.mutua.es")
        run_ping("172.23.0.109", text_area, "Tercer sso.mutua.es")
        run_ping("172.18.0.1", text_area, "CICS Mutua")
        run_ping("172.19.10.153", text_area, "srbigpre11.mutua.es")
        run_ping("172.19.10.8", text_area, "srbigpre12.mutua.es")
        run_ping("172.23.100.5", text_area, "srbigpro11.mutua.es")
        run_ping("172.24.100.3", text_area, "srbigpro12.mutua.es")
        run_ping("172.23.100.6", text_area, "srbigpro13.mutua.es")
        run_ping("172.24.100.5", text_area, "srbigpro14.mutua.es")
        run_ping("172.19.11.41", text_area, "srbig.mutua.es")
        run_ping("172.23.0.83", text_area, "srbig.mutua.es")
        run_ping("160.8.255.40", text_area, "Salesforce Mutua")
    elif selected == 'Basica':
        run_ping("10.5.176.11", text_area, "Puerta de enlace local vlan 176 Fortigate")
        run_ping("192.168.129.11", text_area, "Wan Mutua vlan 10 Fortigate")
        run_ping("192.168.129.5", text_area, "Switch distribución Mutua vlan 10 Cisco")
        run_ping("192.168.129.252", text_area, "Router PPAL Mutua vlan 10")
        run_ping("192.168.129.253", text_area, "Router BKP Mutua vlan 10")
        run_ping("192.168.129.254", text_area, "Router VRRP Mutua vlan 10")
    elif selected == 'ZOOM':     
        pass
    # ... y así sucesivamente
# Función para manejar conjuntos de IPs personalizados
def custom_checks(selected):
    
    ip_list = load_ip_list_from_file()  # Cargar la lista de IPs desde el archivo JSON
    if selected in ip_list:
        for ip_info in ip_list[selected]:
            host = ip_info.get("host", "")
            description = ip_info.get("description", "")
            run_ping(host, text_area, description)

def perform_checks():
    text_area.delete(1.0, tk.END)
    failed_ip_text.config(state=tk.NORMAL)
    failed_ip_text.delete(1.0, tk.END)
    failed_ip_text.config(state=tk.DISABLED)
    selected = selected_set.get()  # Obtén el valor seleccionado del ComboBox
    
    # Iniciar la barra de progreso
    progress.start(10)
    
    if selected in ['Internet', 'Salvatierra 5 all', 'MKT', 'MUTUA', 'Basica']:
        basic_checks()
    else:
        custom_checks(selected)

    # Detener la barra de progreso
    progress.stop()


root = tk.Tk()
root.title("Diagnóstico de Red - Jose Roberto Medina")
root.geometry("1000x700")  # Tamaño de ventana inicial

# Configuración de estilo
style = ttk.Style()
style.theme_use('clam')

# Configuración de la fuente por defecto
default_font = tk.font.nametofont("TkDefaultFont")
default_font.actual()
default_font.configure(size=12)

# Marco para botones
button_frame = ttk.LabelFrame(root, text="Opciones de Comprobación")
button_frame.grid(row=0, column=0, sticky="ew", padx=10, pady=10)
button_frame.grid_columnconfigure(0, weight=1)

# Botones
basic_button = ttk.Button(button_frame, text="Ejecutar Ping", 
                          command=lambda: threading.Thread(target=perform_checks).start())


save_button = ttk.Button(button_frame, text="Guardar IPs", 
                         command=lambda: save_ip_list_to_file(ip_sets))
save_button.pack(side=tk.RIGHT, padx=5, pady=5)

# internet_button = ttk.Button(button_frame, text="Internet", 
#                             command=lambda: threading.Thread(target=internet_checks_thread).start())
# mkt_button = ttk.Button(button_frame, text="MKT", 
#                        command=lambda: threading.Thread(target=mkt_checks_thread).start())      
# mutua_button = ttk.Button(button_frame, text="Mutua", 
#                          command=lambda: threading.Thread(target=mutua_checks_thread).start())      

# Botón de cancelar
cancel_button = ttk.Button(button_frame, text="STOP PING", command=cancel_ping)
cancel_button.pack(side=tk.RIGHT, padx=5, pady=5)                                                                           

# Añade estas líneas para crear un Combobox
#ip_sets = ['Internet', 'Salvatierra 5 all', 'MKT', 'MUTUA', 'Basica']  # Esto es solo un ejemplo, puedes definir tus propios conjuntos
# Añade estas líneas para crear un Combobox
ip_sets = load_ip_list_from_file()  # Cargar los conjuntos de IPs desde el archivo
selected_set = tk.StringVar()  # Variable para almacenar el conjunto seleccionado

ip_set_combo = ttk.Combobox(button_frame, textvariable=selected_set)
ip_set_combo['values'] = list(ip_sets.keys())  # Cargar los nombres de los conjuntos de IPs desde el diccionario
if ip_set_combo['values']:  # Verifica si la lista no está vacía
    ip_set_combo.current(0)  # Establece el valor predeterminado como el primer elemento

ip_set_combo.pack(side=tk.LEFT, padx=5, pady=5)

# Ubicación de botones
basic_button.pack(side=tk.LEFT, padx=5, pady=5)
#internet_button.pack(side=tk.LEFT, padx=5, pady=5)
#mkt_button.pack(side=tk.LEFT, padx=5, pady=5)
#mutua_button.pack(side=tk.LEFT, padx=5, pady=5)

# PanedWindow para un diseño más flexible
paned_window = ttk.PanedWindow(root, orient=tk.HORIZONTAL)
paned_window.grid(row=1, column=0, sticky="nsew", padx=10, pady=10)
root.grid_rowconfigure(1, weight=1)
root.grid_columnconfigure(0, weight=1)

# Área de texto para pings
text_area = scrolledtext.ScrolledText(paned_window, wrap=tk.WORD, width=60, height=30, font=("Arial", 12))

# Área de texto para direcciones IP fallidas y exitosas
failed_ip_text = tk.Text(paned_window, height=30, width=40, font=("Arial", 12))

# Agregar ambos al PanedWindow
paned_window.add(text_area, weight=1)
paned_window.add(failed_ip_text, weight=1)

# Barra de progreso
progress = ttk.Progressbar(root, orient="horizontal", length=300, mode="indeterminate")
progress.grid(row=2, column=0, columnspan=2, pady=10, padx=10, sticky="ew")

# Configurar tag para texto en rojo y verde
failed_ip_text.tag_configure("red", foreground="red")
failed_ip_text.tag_configure("green", foreground="green")

# Agrega estas líneas después de crear los widgets de texto
text_area.bind("<Control-c>", copy_to_clipboard)
failed_ip_text.bind("<Control-c>", copy_to_clipboard)

# Botón de exportar resultados
export_button = ttk.Button(button_frame, text="Exportar Resultados", command=export_results)
export_button.pack(side=tk.RIGHT, padx=5, pady=5)

# Botón de conjunto de ips
add_set_button = ttk.Button(button_frame, text="Agregar nuevo conjunto de IPs", command=add_new_ip_set)
add_set_button.pack(side=tk.LEFT, padx=5, pady=5)

if not validate_network():
    text_area.insert(tk.END, "ADVERTENCIA: No estás en la red correcta. Los resultados pueden ser incorrectos.\n")

root.mainloop()
